GLODEF:	//GLOBAL ADRESS
	CONTROLDEUID	EQU	001H
	CONTROLCDSTR	EQU	037H
	DOORDEUID	EQU	002H
	DOORMOTION	EQU	020H
	CLOCKDEUID	EQU	003H
	CLOCKSMODE	EQU	020H
	CLOCKMONTH	EQU	030H
	CLOCKDATE	EQU	031H
	CLOCKHOUR	EQU	032H
	CLOCKMINUTE	EQU	033H
	CLOCKALM01M	EQU	040H
	CLOCKALM01H	EQU	041H
	CLOCKALM02M	EQU	042H
	CLOCKALM02H	EQU	043H
	CLOCKALM03M	EQU	044H
	CLOCKALM03H	EQU	045H
	CLOCKALM04M	EQU	046H
	CLOCKALM04H	EQU	047H
	WINDOWDEUID	EQU	004H
	WINDOWMOTION	EQU	020H
	RINGDEUID	EQU	005H
	RINGMOTION	EQU	020H
	RINGSNONCH	EQU	038H
	//SERIAL SETUP
	;DEVICEID	EQU	0XXH
	CANRETCODE	EQU	0FEH
	CNTRETCODE	EQU	0FFH
	REPLACECODE	EQU	000H
	CLRCODE		EQU	001H
	SETBCODE	EQU	002H
	CPLCODE		EQU	003H
	SPRSERIAL	EQU	P3
	SPBSERIALTR	EQU	SPRSERIAL.2
	STATE		EQU	070H
	POSITION	EQU	071H
	IDLOOP		EQU	072H
	STORESSTART	EQU	078H
	STORESEND	EQU	07FH
	//DEFINE TIMER 2 (PWM)
	T2CON		EQU	0C8H
	TF2		EQU	T2CON.7
	TR2		EQU	T2CON.2
	CPRL2		EQU	T2CON.0
	RCAP2L		EQU	0CAH
	RCAP2H		EQU	0CBH
	TL2		EQU	0CCH
	TH2		EQU	0CDH
	ET2		EQU	IE.5
DEFINE:	//DEFINE CONST
	MAXDEVICEID	EQU	005H
	//DEFINE ADRESS
	FLSSERIAL	EQU	02FH
	IFCONTIMOUT	EQU	FLSSERIAL.0
	IFCANRECEIVE	EQU	FLSSERIAL.5
	FLBRUNEMPTY	EQU	FLSSERIAL.6
	IFSENDING	EQU	FLSSERIAL.7
	ORG	0000H
		LJMP	START
	ORG	0023H
		LJMP	MCPSTA
	ORG	002BH
		LJMP	EAET2
	ORG	0040H
START:	//SERIAL SETUP
		MOV	SCON, #10010000B
		SETB	ES
		MOV	STATE, #010H
		MOV	POSITION, #STORESSTART+1
		MOV	IDLOOP, #001H
		MOV	FLSSERIAL, #000H
		MOV	R0, #STORESSTART
		LCALL	DSSCLR
		MOV	SPRSERIAL, #0FFH
	//TIMER2 SETUP
		MOV	T2CON, #000H
		MOV	RCAP2H, #0FCH
		MOV	RCAP2L, #018H
		MOV	TH2, RCAP2H
		MOV	TL2, RCAP2L
	//SETUP
		SETB	ET2
		SETB	EA
		MOV	STORESSTART, IDLOOP
		MOV	STORESSTART+1, #0FEH
		MOV	P1, #07FH
MALOOP:		JB	SPBSERIALTR, $
	MALOP0:	MOV	STATE, #010H
		MOV	POSITION, #STORESSTART+1
		CLR	IFCONTIMOUT
		MOV	P2, #0FFH
		SETB	TB8
		SETB	IFSENDING
		SETB	P1.0
		SETB	TR2
		MOV	SBUF, STORESSTART
	SERWAT:	JNB	IFSENDING, SERFIN	;WAIT
		JB	P1.0, SERWAT
	SERFIN:	CLR	TR2
		CLR	P1.0
		JNB	IFCONTIMOUT, NORCON
		CLR	IFCONTIMOUT
		AJMP	ASKNEX
	NORCON:	MOV	A, STORESSTART
		CJNE	A, #0FFH, MALONS
	ASKNEX:	MOV	A, IDLOOP
		CJNE	A, #MAXDEVICEID, MLDNEX
		MOV	IDLOOP, #000H
	MLDNEX:	INC	IDLOOP
		MOV	STATE, #010H
		MOV	POSITION, #STORESSTART+1
		MOV	R0, #STORESSTART
		LCALL	DSSCLR
		MOV	STORESSTART, IDLOOP
		MOV	STORESSTART+1, #0FEH
		AJMP	MALOEN
		CLR	SPBSERIALTR
	MALOEN:	MOV	R6, #002
	DL102A:	MOV	R7, #250
		DJNZ	R7, $
		DJNZ	R6, DL102A
		LJMP	MALOOP
	MALONS:	MOV	R6, #002
	DL102B:	MOV	R7, #250
		DJNZ	R7, $
		DJNZ	R6, DL102B
		LJMP	MALOP0
EAET2:		CLR	TF2
		SETB	IFCONTIMOUT
		CLR	IFSENDING
		RETI
MCPSTA:		PUSH	ACC
		PUSH	PSW
		PUSH	000H
		MOV	TH2, RCAP2H
		MOV	TL2, RCAP2L
		//CHECK TI/RI
		JBC	RI, MCPRST
		CLR	TI
		LJMP	MCPSST
	//RECEIVE PROCESS START
	MCPRST:	MOV	R0, STATE
		MOV	A, SBUF
		//RECEIVE DEPUTY ID
		CJNE	R0, #000H, MCPRMO
		MOV	STATE, #001H
		MOV	POSITION, #STORESSTART+1
		MOV	STORESSTART, A
		LJMP	MCPEND
		//RECEIVE MOTION
	MCPRMO:	CJNE	R0, #001H, MCPRPO
		;IF REACH END
		MOV	R0, POSITION
		CJNE	R0, #STORESEND, MCPRM0
		AJMP	MCPRFN
		;IF RECEIVE FINISH
	MCPRM0:	CJNE	A, #CANRETCODE, MCPRM1
		AJMP	MCPRFI
	MCPRM1:	CJNE	A, #CNTRETCODE, MCPRM2
		AJMP	MCPRFI
	MCPRM2:	MOV	STATE, #002H
		AJMP	MCPRNM
		//RECEIVE POSITION
	MCPRPO:	CJNE	R0, #002H, MCPRVA
		MOV	STATE, #003H
		AJMP	MCPRNM
		//RECEIVE VALUE
	MCPRVA:	CJNE	R0, #003H, MCPRER
		MOV	STATE, #001H
		AJMP	MCPRNM
		//RECEIVE ERROR
	MCPRER:	MOV	STATE, #00FH
		CLR	P2.0
		LJMP	MCPEND
		//RECEIVE NORMAL
	MCPRNM:	MOV	R0, POSITION
		INC	POSITION
		MOV	@R0, A
		LJMP	MCPEND
		//RECEIVE FINISH
	MCPRFI:	MOV	@R0, #CNTRETCODE
	MCPRFN:	MOV	STATE, #010H
		MOV	POSITION, #STORESSTART+1
		CLR	IFSENDING
		LJMP	MCPEND
	//SEND PROCESS START
	MCPSST:	CLR	TI
		//RUN EMPTY
		JNB	FLBRUNEMPTY, MCPSCW
		CLR	FLBRUNEMPTY
		JB	IFCANRECEIVE, MCPSE0
		CLR	IFSENDING
		LJMP	MCPEND
	MCPSE0:	CLR	IFCANRECEIVE
		LJMP	MCPEND
		//SEND CHECK WAIT
	MCPSCW:	MOV	R0, STATE
		CJNE	R0, #010H, MCPSMO
		CLR	TB8
		LCALL	DL400C
		AJMP	MCPSMS
		//SEND MOTION
	MCPSMO:	CJNE	R0, #011H, MCPSPO
	MCPSMS:	MOV	STATE, #012H
		MOV	R0, POSITION
		;IF REACH END
		CJNE	R0, #STORESEND, MCPSM0
		MOV	STATE, #010H
		CLR	IFCANRECEIVE
		MOV	STORESEND, #CNTRETCODE
		AJMP	MCPSFI
	MCPSM0:	MOV	A, @R0
		;IF CAN RECEIVE
		CJNE	A, #CANRETCODE, MCPSM1
		MOV	STATE, #000H
		SETB	IFCANRECEIVE
		AJMP	MCPSFI
		;IF CANT RECEIVE
	MCPSM1:	CJNE	A, #CNTRETCODE, MCPSNM
		MOV	STATE, #010H
		CLR	IFCANRECEIVE
		AJMP	MCPSFI
		//SEND POSITION
	MCPSPO:	CJNE	R0, #012H, MCPSVA
		MOV	STATE, #013H
	MCPSNM:	MOV	R0, POSITION
		INC	POSITION
		MOV	SBUF, @R0
		LCALL	DL400C
		AJMP	MCPEND
		//SEND VALUE
	MCPSVA:	CJNE	R0, #013H, MCPSER
		MOV	STATE, #011H
		MOV	R0, POSITION
		INC	POSITION
		MOV	SBUF, @R0
		LCALL	DL101C
		AJMP	MCPEND
		//SEND ERROR
	MCPSER:	MOV	STATE, #01FH
		CLR	P2.1
		AJMP	MCPEND
		//SEND FINISH
	MCPSFI:	SETB	FLBRUNEMPTY
		MOV	SBUF, @R0
		LCALL	DL400C
		MOV	POSITION, #STORESSTART+1
		MOV	R0, #STORESSTART
		LCALL	DSSCLR
	MCPEND:	POP	000H
		POP	PSW
		POP	ACC
		RETI
DSSCLR:		MOV	A, #STORESEND-STORESSTART+1
	STOCLL:	MOV	@R0, #CNTRETCODE
		INC	R0
		DJNZ	ACC, STOCLL
		RET
DL400C:		PUSH	007H
		MOV	R7, #020
		DJNZ	R7, $
		POP	007H
		RET
DL101C:		PUSH	007H
		MOV	R7, #050
		DJNZ	R7, $
		POP	007H
		RET
	END